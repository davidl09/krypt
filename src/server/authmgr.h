#pragma once

// generated by /usr/local/bin/sqlpp11-ddl2cpp bin/authmgr-schema.sql src/server/authmgr auth

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace auth
{
  namespace Credentials_
  {
    struct Email
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "email";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T email;
            T& operator()() { return email; }
            const T& operator()() const { return email; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct PasswordHash
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "password_hash";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T passwordHash;
            T& operator()() { return passwordHash; }
            const T& operator()() const { return passwordHash; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
  } // namespace Credentials_

  struct Credentials: sqlpp::table_t<Credentials,
               Credentials_::Email,
               Credentials_::PasswordHash>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "credentials";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T credentials;
        T& operator()() { return credentials; }
        const T& operator()() const { return credentials; }
      };
    };
  };
} // namespace auth
