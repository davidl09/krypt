#pragma once

// generated by /usr/local/bin/sqlpp11-ddl2cpp bin/usermgr-schema.sql src/server/ddl db

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace db
{
  namespace Accounts_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct Email
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "email";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T email;
            T& operator()() { return email; }
            const T& operator()() const { return email; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct Tag
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "tag";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T tag;
            T& operator()() { return tag; }
            const T& operator()() const { return tag; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct TimeCreated
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "time_created";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T timeCreated;
            T& operator()() { return timeCreated; }
            const T& operator()() const { return timeCreated; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct PhoneNumber
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "phone_number";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T phoneNumber;
            T& operator()() { return phoneNumber; }
            const T& operator()() const { return phoneNumber; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
  } // namespace Accounts_

  struct Accounts: sqlpp::table_t<Accounts,
               Accounts_::Id,
               Accounts_::Email,
               Accounts_::Name,
               Accounts_::Tag,
               Accounts_::TimeCreated,
               Accounts_::PhoneNumber>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "accounts";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T accounts;
        T& operator()() { return accounts; }
        const T& operator()() const { return accounts; }
      };
    };
  };
} // namespace db
